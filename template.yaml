AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance
    Type: AWS::EC2:KeyPair::KeyName
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  S3BucketName:
    AllowedPattern: ^[a-z0-9][a-z0-9-.]*$
    Default: enter-unique-value-in-lowercase
    Description: Name of the S3 bucket that will be created for data to be stored in. Enter a unique name in lower characters.
    Type: String
  VPCID:
    Description: ID of existing VPC
    Type: AWS::EC2:VPC:Id
  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [development, test, production]
    ConstraintDescription: must be either development/test/production
Mappings:
  AWSRegionAMI:
    us-east-1:
      HVM64: ami-0bba96c31d87e65d9
    us-west-1:
      HVM64: ami-076abd313cd7640bf
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
    eu-west-2:
      HVM64: ami-08e154685c0a4ff29
    eu-central-1:
      HVM64: ami-0f71209b1289bf95c
    ap-northeast-1:
      HVM64: ami-0f0dcd3794e1da1e1
    ap-southeast-1:
      HVM64: ami-060ff7abd2dba844c
  EnvironmentToInstanceType:
    development:
      instanceType: t2.micro
    test:
      instanceType: t2.small
    production:
      instanceType: t2.large
Conditions:
  CreateProductionVolume: !Equals [ !Ref EnvironmentName, production ]
Resources:
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentName, instanceType]
      ImageId: !FindInMap [ AWSRegionAMI, !Ref AWS::Region, HVM64 ]
      KeyName: !Ref KeyName
      SecurityGroups: !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo apt-get install git
          git clone https://github.com/henrychia12/jenkins-server.git
          cd jenkins-server/scripts
          ./install.sh

  ProductionInstanceVolume:
    Type: AWS::EC2::Volume
    Condition: CreateProductionVolume
    Properties:
      Size: 100
      AvailabilityZone: !Select[0, !GetAZs]
  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Condition: CreateProductionVolume
    Properties:
      InstanceId: !Ref myEC2Instance
      VolumeId: !Ref ProductionInstanceVolume
      Device: /dev/sdh
  InstanceSecurityGroup:
    Type: AWS::EC2:SecurityGroup
    Properties:
      GroupDescription: Enable jenkins access via port 8080 and SSH access
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: "8080"
        IpProtocol: tcp
        ToPort: "8080"
      - CidrIp: !Ref SSHLocation
        FromPort: "22"
        IpProtocol: tcp
        ToPort: "22"
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
  S3Bucket:
    Type: AWS::S3::Bucket
    #DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
    AccessControl: BucketOwnerFullControl
Outputs:
  SecurityGroupTrialOutput:
    Description: Port to host Jenkins on and have SSH access
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: SecurityGroupTrial
  S3BucketOutput:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
    Export:
      Name: S3BucketTrial
  VolumeId:
    Condition: CreateProductionVolume
    Value: !Ref ProductionInstanceVolume
