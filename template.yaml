AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
  VPCCidr:
    Description: VPC CIDR block
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"      
    Default: 10.0.0.0/16        
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  PublicSubnet1:
    Description: Please enter the IP range (CIDR notation) for public subnet 1
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.0.0/24
    ConstraintDescription: CIDR block paramater must be in the form x.x.x.x/16-28
#  PrivateSubnet1:
#    Description: Please enter the IP range (CIDR notation) for private subnet 1
#    Type: String 
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    Default: 10.0.1.0/24
#    ConstraintDescription: CIDR block parameter must be in the form of x.x.x.x/16-28
  S3BucketName:
    Description: Name of the S3 bucket that will be created for data to be stored in.
    Type: String
    AllowedPattern: ^[a-z0-9][a-z0-9-.]*$
    Default: enter-unique-value-in-lowercase
    ConstraintDescription: must be a unique bucket name in lower characters
  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [test, production]
    ConstraintDescription: must be test or production environment
Mappings:
  AWSRegionAMI:
    us-east-1:
      HVM64: ami-04b9e92b5572fa0d1
    us-east-2:
      HVM64: ami-0d5d9d301c853a04a
    us-west-1:
      HVM64: ami-0dd655843c87b6930
    us-west-2:
      HVM64: ami-06d51e91cea0dac8d
    eu-west-1:
      HVM64: ami-02df9ea15c1778c9c
    eu-west-2:
      HVM64: ami-0be057a22c63962cb
    eu-west-3:
      HVM64: ami-087855b6c8b59a9e4
    eu-north-1:
      HVM64: ami-1dab2163	
    eu-central-1:
      HVM64: ami-0cc0a36f626a4fdf5
    ap-east-1:
      HVM64: ami-00168f24428eae9dc
    ap-south-1:
      HVM64: ami-0123b531fc646552f
    ap-northeast-1:
      HVM64: ami-0cd744adeca97abb1
    ap-northeast-2:
      HVM64: ami-00379ec40a3e30f87
    ap-southeast-1:
      HVM64: ami-061eb2b23f9f8839c
    ap-southeast-2:
      HVM64: ami-00a54827eb7ffcd3c
    ca-central-1:
      HVM64: ami-0d0eaed20348a3389
    me-south-1:
      HVM64: ami-01011404880c390bf
    sa-east-1:
      HVM64: ami-02c8813f1ea04d4ab   
  EnvironmentToInstanceType:
    test:
      instanceType: t2.micro
    production:
      instanceType: t2.small
Conditions:
  CreateProductionVolume: !Equals [ !Ref EnvironmentName, production ]
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr     
      EnableDnsHostnames: true    
      EnableDnsSupport: true
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  attachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnet1
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
 #privateSubnet1:
 #   Type: AWS::EC2::Subnet
 #   Properties:
 #     VpcId: !Ref myVPC
 #     CidrBlock: !Ref PrivateSubnet1
 #     AvailabilityZone: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", Az]
  publicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
  publicSubnetRoute:
    DependsOn: myInternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref publicSubnetRouteTable
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentName, instanceType]
      ImageId: !FindInMap [ AWSRegionAMI, !Ref "AWS::Region", HVM64 ]
      KeyName: !Ref KeyName
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      SubnetId: !Ref publicSubnet1
      SecurityGroupIds:
      - !GetAtt InstanceSecurityGroup.GroupId
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt-get update
          cd /home
          touch example.txt
          sudo apt-get install docker.io -y
          sudo systemctl start docker
          sudo systemctl enable docker
          touch docker.txt jenkins.txt
          echo "Docker installation process finished!" >> docker.txt
          git clone https://github.com/henrychia12/jenkins-server.git
          echo "jenkins repo cloned?" >> jenkins.txt   
          cd /home/jenkins-server/scripts
          ./install.sh
  ProductionInstanceVolume:
    Type: AWS::EC2::Volume
    Condition: CreateProductionVolume
    Properties:
      Size: 100
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Condition: CreateProductionVolume
    Properties:
      InstanceId: !Ref myEC2Instance
      VolumeId: !Ref ProductionInstanceVolume
      Device: /dev/sdh
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable jenkins access via port 8080 and SSH access
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: "8080"
        IpProtocol: tcp
        ToPort: "8080"
      - CidrIp: 0.0.0.0/0
        FromPort: "22"
        IpProtocol: tcp
        ToPort: "22"
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
  S3Bucket:
    Type: AWS::S3::Bucket
    #DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: BucketOwnerFullControl
Outputs:
  Instance1Output:
    Description: Trial to test SSH access into Instance
    Value: !GetAtt myEC2Instance.PublicIp
  SecurityGroupTrialOutput:
    Description: Port to host Jenkins on and have SSH access
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup
  S3BucketOutput:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-S3Bucket
  VolumeId:
    Condition: CreateProductionVolume
    Value: !Ref ProductionInstanceVolume
