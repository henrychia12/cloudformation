AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
  PublicSubnet1:
    Description: Please enter the IP range (CIDR notation) for public subnet 1
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.128.0/20
    ConstraintDescription: CIDR block paramater must be in the form x.x.x.x/16-28
#  PrivateSubnet1:
#    Description: Please enter the IP range (CIDR notation) for private subnet 1
#    Type: String 
#    AllowedPattern: >-
#    ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
#    Default: 10.0.0.0/19
#    ConstraintDescription: CIDR block parameter must be in the form of x.x.x.x/16-28
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  S3BucketName:
    Description: Name of the S3 bucket that will be created for data to be stored in.
    Type: String
    AllowedPattern: ^[a-z0-9][a-z0-9-.]*$
    Default: enter-unique-value-in-lowercase
    ConstraintDescription: must be a unique bucket name in lower characters
  VPCID:
    Description: ID of existing VPC
    Type: AWS::EC2::VPC::Id
  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [development, test, production]
    ConstraintDescription: must be either development/test/production
Mappings:
  AWSRegionAMI:
    us-east-1:
      HVM64: ami-04b9e92b5572fa0d1
      Az: us-east-1a
    us-west-1:
      HVM64: ami-0dd655843c87b6930
      Az: us-west-1a
    eu-west-1:
      HVM64: ami-02df9ea15c1778c9c
      Az: eu-west-1a
    eu-west-2:
      HVM64: ami-0be057a22c63962cb
      Az: eu-west-2a
    eu-central-1:
      HVM64: ami-0cc0a36f626a4fdf5
      Az: eu-central-1a
    ap-northeast-1:
      HVM64: ami-0cd744adeca97abb1
      Az: ap-northeast-1a
    ap-southeast-1:
      HVM64: ami-061eb2b23f9f8839c
      Az: ap-southeast-1a
  EnvironmentToInstanceType:
    development:
      instanceType: t2.micro
    test:
      instanceType: t2.small
    production:
      instanceType: t2.large
Conditions:
  CreateProductionVolume: !Equals [ !Ref EnvironmentName, production ]
Resources:
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  attachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCID
      InternetGatewayId: !Ref myInternetGateway
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      CidrBlock: !Ref PublicSubnet1
      AvailabilityZone: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", Az]
	  MapPublicIpOnLaunch: true
 #privateSubnet1:
 #   Type: AWS::EC2::Subnet
 #   Properties:
 #     VpcId: !Ref VPCID
 #     CidrBlock: !Ref PrivateSubnet1
 #     AvailabilityZone: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", Az]
  publicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCID
  publicSubnetRoute:
    DependsOn: myInternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref publicSubnetRouteTable
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentName, instanceType]
      ImageId: !FindInMap [ AWSRegionAMI, !Ref "AWS::Region", HVM64 ]
      KeyName: !Ref KeyName
      AvailabilityZone: !FindInMap [ AWSRegionAMI, !Ref "AWS::Region", Az]
      SecurityGroupIds:
      - !GetAtt InstanceSecurityGroup.GroupId
      #UserData:
      #  Fn::Base64: |
      #    #!/bin/bash
      #    sudo apt-get install git
      #    git clone https://github.com/henrychia12/jenkins-server.git
      #    cd jenkins-server/scripts
      #    ./install.sh
  ProductionInstanceVolume:
    Type: AWS::EC2::Volume
    Condition: CreateProductionVolume
    Properties:
      Size: 100
      AvailabilityZone: !GetAtt myEC2Instance.AvailabilityZone
  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Condition: CreateProductionVolume
    Properties:
      InstanceId: !Ref myEC2Instance
      VolumeId: !Ref ProductionInstanceVolume
      Device: /dev/sdh
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable jenkins access via port 8080 and SSH access
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: "8080"
        IpProtocol: tcp
        ToPort: "8080"
      - CidrIp: !Ref SSHLocation
        FromPort: "22"
        IpProtocol: tcp
        ToPort: "22"
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
  #S3Bucket:
  #  Type: AWS::S3::Bucket
  #  #DeletionPolicy: Retain
  #  Properties:
  #    BucketName: !Ref S3BucketName
  #    AccessControl: BucketOwnerFullControl
Outputs:
  SecurityGroupTrialOutput:
    Description: Port to host Jenkins on and have SSH access
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: SecurityGroupTrial
  #S3BucketOutput:
  #  Description: S3 Bucket Name
  #  Value: !Ref S3Bucket
  #  Export:
  #    Name: S3BucketTrial
  VolumeId:
    Condition: CreateProductionVolume
    Value: !Ref ProductionInstanceVolume
